CREATE TABLE CAR (
CAR_NO INT,CAR_NAME VARCHAR(30),CAR_PRICE FLOAT,NO_OF_CARS INT
);
SELECT * FROM CAR;

INSERT INTO CAR VALUES (112,"TESLA",1200000,2), (113,"BMW",2300000,3), (114,"AUDI",2500000,4);
INSERT INTO CAR VALUES (116,"TATA",1200000,5), (119,"KIA",2300000,4);

-- VARIOUS EXAMPLES OF GROUP BY CLAUSE 

SELECT count(CAR_NAME), CAR_PRICE FROM CAR GROUP BY CAR_PRICE;
SELECT COUNT(CAR_NAME) AS COUNT_NUMBER,CAR_PRICE FROM CAR GROUP BY CAR_PRICE;
SELECT COUNT(CAR_NAME) FROM CAR GROUP BY CAR_PRICE HAVING CAR_PRICE > 1200000; 
SELECT COUNT(*) FROM CAR GROUP BY CAR_PRICE HAVING CAR_PRICE > 1200000;

-- CREATION OF NEW TABLE

CREATE TABLE VISIT (ENTRY_DATE DATE, PRICE INT, DURATION INT);
INSERT INTO VISIT VALUES ('2023-05-01',1000,20), ('2023-05-01',2000,20), ('2023-05-01',2000,30),
('2023-06-20',2000,45);
INSERT INTO VISIT VALUES('2023-07-01',5000,78);
INSERT INTO VISIT VALUES('2023-08-01',1500,78);
SELECT * FROM VISIT;
SELECT ENTRY_DATE, COUNT(*) FROM VISIT GROUP BY ENTRY_DATE;

-- EXAMPLES OF EXTRACT KEYWORD
-- EXTRACT KEYWORD IS USED TO EXTRACT MONTH,YEAR,DAY FROM DATE.
-- ROUND FUNCTION IS USED TO ROUND OF UPTO GIVEN DECIMAL POINTS.

SELECT EXTRACT(YEAR FROM ENTRY_DATE) AS YEAR ,
EXTRACT(MONTH FROM ENTRY_DATE) AS MONTH,
ROUND(AVG(PRICE),3) FROM VISIT
GROUP BY EXTRACT(YEAR FROM ENTRY_DATE),EXTRACT(MONTH FROM ENTRY_DATE); 
 
 SELECT EXTRACT(YEAR FROM ENTRY_DATE) AS YEAR ,
EXTRACT(MONTH FROM ENTRY_DATE) AS MONTH,
ROUND(AVG(PRICE),3) FROM VISIT
GROUP BY EXTRACT(YEAR FROM ENTRY_DATE),EXTRACT(MONTH FROM ENTRY_DATE)
 ORDER BY EXTRACT(YEAR FROM ENTRY_DATE),EXTRACT(MONTH FROM ENTRY_DATE);
 
 SELECT EXTRACT(YEAR FROM ENTRY_DATE) AS YEAR ,
EXTRACT(MONTH FROM ENTRY_DATE) AS MONTH,
EXTRACT(DAY FROM ENTRY_DATE) AS DAY,
ROUND(AVG(PRICE),3) FROM VISIT
GROUP BY EXTRACT(YEAR FROM ENTRY_DATE),EXTRACT(MONTH FROM ENTRY_DATE),eXTRACT(DAY FROM ENTRY_DATE)
 ORDER BY EXTRACT(YEAR FROM ENTRY_DATE),EXTRACT(MONTH FROM ENTRY_DATE);
 
 SELECT ENTRY_DATE, ROUND(AVG(PRICE),3) AS AVG_PRICE FROM VISIT GROUP BY ENTRY_DATE HAVING COUNT(*)>0 ORDER BY ENTRY_DATE;
 
 SELECT ENTRY_DATE, ROUND(AVG(PRICE),2) AS AVG_PRICE FROM VISIT WHERE DURATION>10
 GROUP BY ENTRY_DATE HAVING COUNT(*)>1 ORDER BY ENTRY_DATE;
 
 
 -- CREATION OF TABLE
 
 CREATE TABLE CUSTOMER ;
 
 
 
 -- CREATION OF EMPLOYEE TABLE
 
 CREATE TABLE EMPLOYEE (
 EMP_ID INT, NAME VARCHAR(30), AGE INT, COUNTRY VARCHAR(30)
 );
 SELECT * FROM EMPLOYEE;
 INSERT INTO EMPLOYEE VALUES
 (101,"ANISH",21,"INDIA"),
 (102,"PAKSHI",21,"NEWZEALAND"),
 (103,"NITHIN",20,"AUSTRALIA"),
 (104,"MADHU",22,"INDIA"),
 (105,"HERO",20,"AUSTRALIA");
 
 SELECT COUNT(COUNTRY),COUNTRY FROM EMPLOYEE GROUP BY COUNTRY HAVING COUNT(COUNTRY)>=2;
 SELECT COUNTRY,COUNTRY,COUNT(COUNTRY) FROM EMPLOYEE GROUP BY COUNTRY HAVING MAX(AGE)<=20;
 SELECT COUNTRY,COUNTRY,COUNT(COUNTRY) FROM EMPLOYEE GROUP BY COUNTRY HAVING MIN(AGE)>=20;
 
 -- MANAGER TABLE
 
 CREATE TABLE MANAGER (
 ID INT,NAME VARCHAR(30), GENDER VARCHAR(10), AGE INT, SALARY INT
 );
 SELECT * FROM MANAGER;
 INSERT INTO MANAGER VALUES (101,"ANISH",'M',21,100000),
 (102,"PAKSHI",'M',21,80000),
 (103,"NITHIN",'M',20,60000),
 (104,"MADHU",'F',22,98000),
 (105,"HEROIN",'F',20,60000);
 
 SELECT GENDER, SUM(SALARY) AS TOTAL_SALARY FROM MANAGER GROUP BY GENDER HAVING SUM(SALARY)>100000 
 ORDER BY GENDER DESC;
 SELECT COUNT(AGE),AGE FROM MANAGER GROUP BY AGE HAVING COUNT(AGE)>1;
 
 SELECT GENDER,MAX(SALARY) AS MAX_SALARY FROM MANAGER GROUP BY GENDER HAVING MAX(SALARY)>10000;
 
 -- PROCEDURES TO KEEP COPY OF OUR FILES/ TO MAINTAIN REPLICAS WE CTREATE STORED PROCEDURES
 -- STORED PROCEDURES ARE LIKE FUNCTIONS SO THAT'S Y WE USE ()
 DELIMITER //
 CREATE PROCEDURE GetManagerInfo()
 BEGIN
	SELECT * FROM MANAGER;
END //

 CALL GetManagerInfo();
 
 
 DELIMITER //
 CREATE PROCEDURE GetManagerAge()
 BEGIN
	SELECT * FROM MANAGER WHERE AGE=20;
END //

 CALL GetManagerAge();
 
 -- RANDOM FUNCTION IS USED TO DISPLAY SOME DATA RANDOMLY
 SELECT NAME FROM MANAGER ORDER BY RAND() LIMIT 1;